// Copyright 2023 steve. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

#pragma once

#include "minstdconfig.h"

#include <stddef.h>

#include "allocator"

namespace MINIMAL_STD_NAMESPACE
{

    template <typename T, size_t FIXED_SIZE>
    class stack_allocator : public allocator<T>
    {
    public:
        stack_allocator() = default;

        size_t max_size() const noexcept override
        {
            return FIXED_SIZE;
        }

        T *allocate(size_t num_elements) override
        {
            MINIMAL_STD_ASSERT(current_size_ + num_elements <= FIXED_SIZE);

            T *block = elements_ + current_size_;

            current_size_ += num_elements;

            return block;
        }

        void deallocate(T *ptr, size_t num_elements) override
        {
        }

    private:
        char buffer_[sizeof( T [FIXED_SIZE] )];
        T* elements_ = reinterpret_cast<T*>(buffer_);

        size_t current_size_ = 0;
    };

}