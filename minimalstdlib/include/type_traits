// Copyright 2023 Stephan Friedl. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

//  Almost all of this file is lifted or adapted from John Wellbelove's ETL project.
//      Attribution and licensing for that project appears below.
//
//  Honestly, there just are not other ways to implement many of these functions,
//      particularly if you want to stay compliant with the standard.

/******************************************************************************
The MIT License(MIT)

Embedded Template Library.
https://github.com/ETLCPP/etl
https://www.etlcpp.com

Copyright(c) 2014 John Wellbelove

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files(the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and / or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions :

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
******************************************************************************/

#pragma once

#include "minstdconfig.h"
#include <stddef.h>

namespace MINIMAL_STD_NAMESPACE
{
    //  Integral constants first, we will need them for the constexpr true and false

    template <typename T, T VALUE>
    struct integral_constant
    {
        static const T value = VALUE;

        typedef T value_type;
        typedef integral_constant<T, VALUE> type;

        operator value_type() const
        {
            return value;
        }
    };

    //  constexpr true and false

    typedef integral_constant<bool, false> false_type;
    typedef integral_constant<bool, true> true_type;

    template <typename T, T VALUE>
    const T integral_constant<T, VALUE>::value;

    template <typename T, T VALUE>
    inline constexpr T integral_constant_v = integral_constant<T, VALUE>::value;

    template <bool B>
    using bool_constant = integral_constant<bool, B>;

    template <bool B>
    inline constexpr bool bool_constant_v = bool_constant<B>::value;

    //  Remove reference
    //      These template structs trip the reference and move operators off of the
    //      template argument 'T'.  This is just a pretty straightforward use of
    //      templates where the 'type' member of the struct is the same type
    //      as T, just without the reference or move modifier for the type.
    //
    //  This same apptern is simply repeated for all the 'remove_*' operations.

    template <typename T>
    struct remove_reference
    {
        typedef T type;
    };
    template <typename T>
    struct remove_reference<T &>
    {
        typedef T type;
    };
    template <typename T>
    struct remove_reference<T &&>
    {
        typedef T type;
    };

    template <typename T>
    using remove_reference_t = typename remove_reference<T>::type;

    //  Remove pointer

    template <typename T>
    struct remove_pointer
    {
        typedef T type;
    };
    template <typename T>
    struct remove_pointer<T *>
    {
        typedef T type;
    };
    template <typename T>
    struct remove_pointer<const T *>
    {
        typedef const T type;
    };
    template <typename T>
    struct remove_pointer<volatile T *>
    {
        typedef volatile T type;
    };
    template <typename T>
    struct remove_pointer<const volatile T *>
    {
        typedef const volatile T type;
    };
    template <typename T>
    struct remove_pointer<T *const>
    {
        typedef T type;
    };
    template <typename T>
    struct remove_pointer<const T *const>
    {
        typedef const T type;
    };
    template <typename T>
    struct remove_pointer<volatile T *const>
    {
        typedef volatile T type;
    };
    template <typename T>
    struct remove_pointer<const volatile T *const>
    {
        typedef const volatile T type;
    };

    //  Remove const

    template <typename T>
    using remove_pointer_t = typename remove_pointer<T>::type;
    template <typename T>
    struct remove_const
    {
        typedef T type;
    };
    template <typename T>
    struct remove_const<const T>
    {
        typedef T type;
    };

    template <typename T>
    using remove_const_t = typename remove_const<T>::type;

    //  Remove volatile

    template <typename T>
    struct remove_volatile
    {
        typedef T type;
    };
    template <typename T>
    struct remove_volatile<volatile T>
    {
        typedef T type;
    };

    template <typename T>
    using remove_volatile_t = typename remove_volatile<T>::type;

    //  Remove cv

    template <typename T>
    struct remove_cv
    {
        typedef typename remove_volatile<typename remove_const<T>::type>::type type;
    };

    template <typename T>
    using remove_cv_t = typename remove_cv<T>::type;

    //  Remove cvref

    template <typename T>
    struct remove_cvref
    {
        typedef typename remove_cv<typename remove_reference<T>::type>::type type;
    };

    template <typename T>
    using remove_cvref_t = typename remove_cvref<T>::type;

    //  Determine if the type is an lvalue reference

    template <typename T>
    struct is_lvalue_reference_helper : false_type
    {
    };

    template <typename T>
    struct is_lvalue_reference_helper<T &> : true_type
    {
    };

    template <typename T>
    struct is_lvalue_reference : is_lvalue_reference_helper<typename remove_cv<T>::type>
    {
    };

    template <typename T>
    inline constexpr bool is_lvalue_reference_v = is_lvalue_reference<T>::value;

    //  Determine if the type is a rvalue reference

    template <typename T>
    struct is_rvalue_reference_helper : false_type
    {
    };

    template <typename T>
    struct is_rvalue_reference_helper<T &&> : true_type
    {
    };

    template <typename T>
    struct is_rvalue_reference : is_rvalue_reference_helper<typename remove_cv<T>::type>
    {
    };

    template <typename T>
    inline constexpr bool is_rvalue_reference_v = is_rvalue_reference<T>::value;

    //  Determine if the type is an integral type

    template <typename T>
    struct is_integral : false_type
    {
    };
    template <>
    struct is_integral<bool> : true_type
    {
    };
    template <>
    struct is_integral<char> : true_type
    {
    };
    template <>
    struct is_integral<unsigned char> : true_type
    {
    };
    template <>
    struct is_integral<signed char> : true_type
    {
    };
    template <>
    struct is_integral<wchar_t> : true_type
    {
    };
    template <>
    struct is_integral<short> : true_type
    {
    };
    template <>
    struct is_integral<unsigned short> : true_type
    {
    };
    template <>
    struct is_integral<int> : true_type
    {
    };
    template <>
    struct is_integral<unsigned int> : true_type
    {
    };
    template <>
    struct is_integral<long> : true_type
    {
    };
    template <>
    struct is_integral<unsigned long> : true_type
    {
    };
    template <>
    struct is_integral<long long> : true_type
    {
    };
    template <>
    struct is_integral<unsigned long long> : true_type
    {
    };
    template <typename T>
    struct is_integral<const T> : is_integral<T>
    {
    };
    template <typename T>
    struct is_integral<volatile T> : is_integral<T>
    {
    };
    template <typename T>
    struct is_integral<const volatile T> : is_integral<T>
    {
    };

    template <typename T>
    inline constexpr bool is_integral_v = is_integral<T>::value;

    //  Determine if the type is a signed artihmetic value

    template <typename T>
    struct is_signed : false_type
    {
    };
    template <>
    struct is_signed<char> : bool_constant<(char(255) < 0)>
    {
    };
    template <>
    struct is_signed<wchar_t> : public bool_constant<wchar_t(-1) < wchar_t(0)>
    {
    };
    template <>
    struct is_signed<signed char> : true_type
    {
    };
    template <>
    struct is_signed<short> : true_type
    {
    };
    template <>
    struct is_signed<int> : true_type
    {
    };
    template <>
    struct is_signed<long> : true_type
    {
    };
    template <>
    struct is_signed<long long> : true_type
    {
    };
    template <>
    struct is_signed<float> : true_type
    {
    };
    template <>
    struct is_signed<double> : true_type
    {
    };
    template <>
    struct is_signed<long double> : true_type
    {
    };
    template <typename T>
    struct is_signed<const T> : is_signed<T>
    {
    };
    template <typename T>
    struct is_signed<volatile T> : is_signed<T>
    {
    };
    template <typename T>
    struct is_signed<const volatile T> : is_signed<T>
    {
    };

    template <typename T>
    inline constexpr bool is_signed_v = is_signed<T>::value;

    //  Determine if the type is an unsigned value

    template <typename T>
    struct is_unsigned : false_type
    {
    };
    template <>
    struct is_unsigned<bool> : true_type
    {
    };
    template <>
    struct is_unsigned<char> : bool_constant<(char(255) > 0)>
    {
    };
    template <>
    struct is_unsigned<unsigned char> : true_type
    {
    };
    template <>
    struct is_unsigned<wchar_t> : public bool_constant<(wchar_t(-1) > wchar_t(0))>
    {
    };
    template <>
    struct is_unsigned<unsigned short> : true_type
    {
    };
    template <>
    struct is_unsigned<unsigned int> : true_type
    {
    };
    template <>
    struct is_unsigned<unsigned long> : true_type
    {
    };
    template <>
    struct is_unsigned<unsigned long long> : true_type
    {
    };
    template <typename T>
    struct is_unsigned<const T> : is_unsigned<T>
    {
    };
    template <typename T>
    struct is_unsigned<volatile T> : is_unsigned<T>
    {
    };
    template <typename T>
    struct is_unsigned<const volatile T> : is_unsigned<T>
    {
    };

    template <typename T>
    inline constexpr bool is_unsigned_v = is_unsigned<T>::value;

    //  Determine if the type is a floating point arithmetic type

    template <typename T>
    struct is_floating_point : false_type
    {
    };
    template <>
    struct is_floating_point<float> : true_type
    {
    };
    template <>
    struct is_floating_point<double> : true_type
    {
    };
    template <>
    struct is_floating_point<long double> : true_type
    {
    };
    template <typename T>
    struct is_floating_point<const T> : is_floating_point<T>
    {
    };
    template <typename T>
    struct is_floating_point<volatile T> : is_floating_point<T>
    {
    };
    template <typename T>
    struct is_floating_point<const volatile T> : is_floating_point<T>
    {
    };

    template <typename T>
    inline constexpr bool is_floating_point_v = is_floating_point<T>::value;

    //  Determine if the types match

    template <typename T1, typename T2>
    struct is_same : public false_type
    {
    };
    template <typename T>
    struct is_same<T, T> : public true_type
    {
    };

    template <typename T1, typename T2>
    inline constexpr bool is_same_v = is_same<T1, T2>::value;

    //  Determine if the type is void

    template <typename T>
    struct is_void : false_type
    {
    };
    template <>
    struct is_void<void> : true_type
    {
    };

    template <typename T>
    inline constexpr bool is_void_v = is_void<T>::value;

    //  Determine if the type is arithmetic

    template <typename T>
    struct is_arithmetic : bool_constant<is_integral<T>::value || is_floating_point<T>::value>
    {
    };

    template <typename T>
    inline constexpr bool is_arithmetic_v = is_arithmetic<T>::value;

    //  Determine if the type is fundamental, i.e. builtin

    template <typename T>
    struct is_fundamental : bool_constant<is_arithmetic<T>::value || is_void<T>::value>
    {
    };

    template <typename T>
    inline constexpr bool is_fundamental_v = is_fundamental<T>::value;

    template <typename T>
    struct is_compound : bool_constant<!is_fundamental<T>::value>
    {
    };

    //  Determine if the type is compound

    template <typename T>
    inline constexpr bool is_compound_v = is_compound<T>::value;

    //  Determine if the type is an array

    template <typename T>
    struct is_array : false_type
    {
    };
    template <typename T>
    struct is_array<T[]> : true_type
    {
    };
    template <typename T, size_t MAXN>
    struct is_array<T[MAXN]> : true_type
    {
    };

    template <typename T>
    inline constexpr bool is_array_v = is_array<T>::value;

    //  Determine if the type a a pointer helper

    template <typename T>
    struct is_pointer_helper : false_type
    {
    };
    template <typename T>
    struct is_pointer_helper<T *> : true_type
    {
    };
    template <typename T>
    struct is_pointer : is_pointer_helper<typename remove_cv<T>::type>
    {
    };

    template <typename T>
    inline constexpr bool is_pointer_v = is_pointer<T>::value;

    //  Add rva;ue references

    template <typename T>
    struct add_rvalue_reference
    {
        using type = T &&;
    };
    template <typename T>
    struct add_rvalue_reference<T &>
    {
        using type = T &;
    };
    template <>
    struct add_rvalue_reference<void>
    {
        using type = void;
    };
    template <>
    struct add_rvalue_reference<const void>
    {
        using type = const void;
    };
    template <>
    struct add_rvalue_reference<volatile void>
    {
        using type = volatile void;
    };
    template <>
    struct add_rvalue_reference<const volatile void>
    {
        using type = const volatile void;
    };

    template <typename T>
    typename add_rvalue_reference<T>::type declval() noexcept;

    //  Determine if the type is a class

    namespace private_type_traits
    {
        template <typename T>
        char test(int T::*); //  Class match

        struct dummy
        {
            char c[2];
        };
        template <typename T>
        dummy test(...); //  Non-Class match
    }

    template <typename T>
    struct is_class : bool_constant<sizeof(private_type_traits::test<T>(0)) == 1U>
    {
    };

    template <typename T>
    inline constexpr bool is_class_v = is_class<T>::value;

    //  Determine if one type is convertible to the second

    namespace private_type_traits
    {
        template <typename>
        using true_type_for = true_type;

        template <typename T>
        auto returnable(int) -> true_type_for<T()>;

        template <typename>
        auto returnable(...) -> false_type;

        template <typename TFrom, typename TTo>
        auto nonvoid_convertible(int) -> true_type_for<decltype(declval<void (&)(TTo)>()(declval<TFrom>()))>;

        template <typename, typename>
        auto nonvoid_convertible(...) -> false_type;
    }

    template <typename TFrom, typename TTo>
    struct is_convertible : bool_constant<(decltype(private_type_traits::returnable<TTo>(0))::value &&
                                           decltype(private_type_traits::nonvoid_convertible<TFrom, TTo>(0))::value) ||
                                          (is_void<TFrom>::value && is_void<TTo>::value)>
    {
    };

    //  Determine if one type is a base of the other

    template <typename TBase,
              typename TDerived,
              const bool IsFundamental = (is_fundamental<TBase>::value || is_fundamental<TDerived>::value || is_array<TDerived>::value)>
    struct is_base_of
    {
    private:
        template <typename T>
        struct dummy
        {
        };
        struct internal : TDerived, dummy<int>
        {
        };

        static TBase *check(TBase *) { return (TBase *)0; }

        template <typename T>
        static char check(dummy<T> *) { return 0; }

    public:
        static const bool value = (sizeof(check((internal *)0)) == sizeof(TBase *));
    };

    // For when TBase or TDerived is a fundamental type.
    template <typename TBase, typename TDerived>
    struct is_base_of<TBase, TDerived, true>
    {
        static const bool value = false;
    };

    template <typename T1, typename T2>
    inline constexpr bool is_base_of_v = is_base_of<T1, T2>::value;

}
